{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPCvPtCQ714I9ULVwYte5TM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GenaroGA/Optimizacion-II/blob/dev-branch/Distancia%20m%C3%ACnima%20floyd\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GvLzEOfyTeLY",
        "outputId": "8cd0f7bc-0e40-4b03-c848-c1f8c8a67519"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0  28  14  0  18  44  19   \n",
            "50  0  64  9  7  94  69   \n",
            "11  14  0  38  15  34  30   \n",
            "23  19  16  0  30  67  42   \n",
            "48  76  62  6  0  8  18   \n",
            "14  22  26  14  32  0  12   \n",
            "22  36  36  34  42  66  0   \n",
            "1  3  3  4  5  6  7   \n",
            "1  2  1  4  5  1  1   \n",
            "1  2  3  4  5  6  1   \n",
            "1  2  3  4  5  1  1   \n",
            "1  3  1  4  5  6  7   \n",
            "1  2  3  1  1  6  7   \n",
            "1  2  1  4  5  1  7   \n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import networkx as nx\n",
        "x = 999999\n",
        "nV= 7\n",
        "Matriz = [[  0, x, 14, 0,  18, 44, 19],\n",
        "        [  50, 0, x, 9, 7, x, x],\n",
        "        [  11, 14, 0, 38, 15, 34, x],\n",
        "        [  23, 19, 16, 0, 30, x, x],\n",
        "        [  48, x, x, 6, 0, 8, 18],\n",
        "        [  14, 22, 26, x, x, 0, 12],\n",
        "        [  22, 36, x, 34, 42, x, 0]]\n",
        "\n",
        "Base = [[  1, 2, 3, 4, 5, 6, 7],\n",
        "        [  1, 2, 3, 4, 5, 6, 7],\n",
        "        [  1, 2, 3, 4, 5, 6, 7],\n",
        "        [  1, 2, 3, 4, 5, 6, 7],\n",
        "        [  1, 2, 3, 4, 5, 6, 7],\n",
        "        [  1, 2, 3, 4, 5, 6, 7],\n",
        "        [  1, 2, 3, 4, 5, 6, 7]]  \n",
        "        \n",
        "def floyd(G,M):\n",
        "    dist = list(map(lambda p: list(map(lambda q: q, p)), G))\n",
        "    bases = list(map(lambda p: list(map(lambda q: q, p)), M))\n",
        "    # Adding vertices individually\n",
        "    for r in range(nV):\n",
        "        for p in range(nV):\n",
        "            for q in range(nV):\n",
        "                if(dist[p][q] == x):\n",
        "                   bases[p][q] = r+1\n",
        "                if(dist[p][q] == x): \n",
        "                   dist[p][q] = min(dist[p][q], dist[p][r] + dist[r][q])\n",
        "    sol(dist)\n",
        "    imprime(bases)\n",
        "# Printing the output\n",
        "def sol(dist):\n",
        "    for p in range(nV):\n",
        "        for q in range(nV):\n",
        "            if(dist[p][q] == x):\n",
        "                print(\"x\", end=\" \")\n",
        "            else:\n",
        "                print(dist[p][q], end=\"  \")\n",
        "        print(\" \")\n",
        "def imprime(bases):\n",
        "    for p in range(nV):\n",
        "        for q in range(nV):\n",
        "                print(bases[p][q], end=\"  \")\n",
        "        print(\" \")\n",
        "\n",
        "floyd(Matriz,Base)\n",
        " "
      ]
    }
  ]
}